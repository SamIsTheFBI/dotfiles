#!/bin/sh

# p_name  : Player name
# p_glyph : Player glyph
# s_name  : (Player) state (name)
# s_glyph : (Player) state glyph
# ctl     : (playerctl | mpc)
# id      : If chose playerctl as ctl, then id (playerctld | mpd | chromium | ... )

tmp="/tmp"
artdefault="$HOME/.config/ncmpcpp/albumarts/default_cover.jpg"
artffmpeg="$HOME/.config/ncmpcpp/albumarts/ffmpeg"
ctl="playerctl"
id="playerctld"

if [ "${id}" == 'playerctld' ]; then
  [ "$(playerctl status)" == 'Stopped' ] && id="$(playerctl -l | sed -n 2p)"
fi

notify () {
  # $1 : Heading
  # $2 : Message
  # $3 : Image, if any

  notify-send -r 165774 -t 3000 -i "${3}" "${1}" "<span font = 'JetBrainsMono Nerd Font 11'>${2}</span>" 2>/dev/null
}

albumart () {
  mpris_art="$(playerctl metadata | grep artUrl)"
  artid="$( awk -F '/' '{print $(NF-1)}' <<< ${mpris_art} )"
  [ -z ${mpris_art} ] \
    && arturl='ffmpeg' \
    || arturl="$( awk '{print $NF}' <<< ${mpris_art}  )"

  case "$arturl" in
    ffmpeg)
      fileurl="$(echo -e "$(playerctl metadata --format '{{xesam:url}}' | sed 's!file://!!g' | sed 's!%!\\x!g')")"
      [ -z "${fileurl}" ] && break

      filename="$(echo "${fileurl}" | awk -F '/' '{print $NF}' )"
      filetype="$(file -N -i -- "${fileurl}" | awk -F ': ' '{print $2}' | awk -F '/' '{print $1}' )"
      artffmpeg="$(echo "${artffmpeg}_${filename}_.jpg" )"
      if [ ! -f "${artffmpeg}" ]; then
        [ "${filetype}" == 'video' ] \
          && ffmpeg -y -hide_banner -loglevel panic -i "${fileurl}" -vframes 1 -an -s 400x222 -ss 30 "${artffmpeg}" \
          || ffmpeg -y -hide_banner -loglevel panic -i "${fileurl}" -an -vcodec copy "${artffmpeg}"
      fi
      img=${artffmpeg}
      ;;
    file*) 
      img=${arturl}
      ;;
    http*) 
      artfile=${tmp}/${artid}
      [ ! -f "${artfile}" ] && \
      wget "${arturl}" -O "${artfile}"
      img=${artfile}
      ;;
    *base64*) 
      artfile=${tmp}/${output}
      [ ! -f "${artfile}" ] && \
      echo "${arturl}" | sed -e 's#data:image/jpeg;base64,##' | base64 --decode > ${artfile}
      img=${artfile}
      ;;
    '')    
      [ $p_name == 'mpd' ] && img=${artdefault}
      ;;
  esac
  notify "$p_glyph Now Playing" "$output" "$img"
}

check_player () {
    [ -z "$1" ] \
      && p_name="$(playerctl metadata --format '{{ playerName }}')" \
      || p_name="${1}"
    # playerpid="$(playerctl -l | awk -F 'instance' 'NR==1{print $NF}')"
    # p_name="$(ps -p "$playerpid" -o comm=)"
    case $p_name in 
        mpd*)       p_glyph=""  ;;
        chromium*)  p_glyph=""  ;;
        firefox*)   p_glyph=""  ;;
        spotify*)   p_glyph=""  ;;
        mpv*)       p_glyph=""  ;;
        tdesktop*)  p_glyph=""  ;;
        vlc*)       p_glyph="嗢" ;;
        youtube)    p_glyph=""  ;;
        *)          p_glyph=""  ;;
    esac
}

check_state () {
    if [ $ctl == 'playerctl' ]; then
        case "$(playerctl status)" in
            'Paused')  s_glyph="";;
            'Playing') s_glyph="";;
            'Stopped') s_glyph="" ;;
        esac
    elif [ $ctl == 'mpc' ]; then
        case "$(mpc status %state%)" in
            'paused')  s_glyph="";;
            'playing') s_glyph="";;
        esac
    fi
}

mpc_output () {
  output="$(mpc current)"
  check_player "mpd"
}

playerctl_output () {
  metadata="playerctl -p "$id" metadata"
  artist="$( ${metadata} --format '{{artist}}' )"
  fileurl="$( ${metadata} --format '{{xesam:url}}' )"
  title="$( ${metadata} --format '{{title}}' )"
  
  [ -z "${metadata}" ] && return 0

  case "${artist}" in
    'unknown artist') [ "$(command -v mpc)" != '' ] \
                      && output="$(mpc current)" \
                      || output="${title}";;
    '')               output="${title}" ;;
    *)                output="${title} - ${artist}" ;;
  esac

  case "${fileurl}" in
    *youtube*) check_player "youtube" ;;
    *)         check_player ;;
  esac
}

sbar_output () {
  output="${1}"
  [ -z "${output}" ] && echo ' ' && return 0

  n=${#output}
  char_limit=35
  [ "$n" -gt ${char_limit} ] \
    && printf "^B1^^C0^ $p_glyph | $s_glyph %.$(( $char_limit - 2 ))s.. ^d^" "$output" \
    || printf "^B1^^C0^ $p_glyph | $s_glyph %s ^d^" "$output"
}

norm_output () {
  output="${1}"
  [ -z "${output}" ] && echo ' ' && return 0

  printf "$p_glyph | $s_glyph %s\n" "$output"
}

check_click () {
  case $BLOCK_BUTTON in
      1) playerctl -p "$id" play-pause ;;
      2) albumart ;;
      3) if [ "$(playerctl loop)" != 'Track' ]; then
             playerctl -p "$id" loop Track
             [ "$(playerctl loop)" == 'Track' ] && \
                 notify "綾" "Looping current track now" || \
                 notify "$p_glyph" "Error occurred. Can't change loop status"
         else
             notify "凌" "Looping playlist now"
             playerctl -p "$id" loop Playlist
         fi;;
  esac
}

check_state
case "${ctl}" in
  'playerctl') playerctl_output ;;
  'mpc')       mpc_output ;;
esac

case "${1}" in
  'sbar') sbar_output "$output" ;;
  '' | *) norm_output "$output" ;;
esac
check_click
